@page "/"
@inject Models.EmployeeContext DBContext
@using FirstBlazorApp.Models

@inject NavigationManager NavigationManager
<h1>Hello, Bassam</h1>
test deploy   id test ///****/*///*/*
<p>
    <a href="addemp">Create New Employee</a>
</p>
<EditForm Model="@emp" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-8">
            <div class="row" style="margin-top:10px">
                <div class="col-md-12">
                    <label for="Fullname">Fullname #</label>
                    <input type="text" class="form-control" id="Fullname" @bind-value="@emp.Fullname" placeholder="enter Fullname..." />
                    <ValidationMessage For="@(()=>emp.Fullname)" />
                </div>
            </div>
            <div class="row" style="margin-top:10px">
                <div class="col-md-12">
                    <label for="Email">Email#</label>
                    <input type="text" class="form-control" id="Email" @bind-value="@emp.Email" placeholder="enter Email..." />
                    <ValidationMessage For="@(()=>emp.Email)" />
                </div>
            </div>
            <div class="row" style="margin-top:10px">
                <div class="col-md-12">
                    <label for="MobileNumber">Mobile Number #</label>
                    <input type="text" class="form-control" id="MobileNumber" @bind-value="@emp.MobileNumber" />
                    <ValidationMessage For="@(()=>emp.MobileNumber)" />
                </div>
            </div>

            <button type="submit" class="btn btn-info" Style="margin-top:10px">Add user</button>
        </div>
        @if (displayValidationErrorMessages)
        {
            <div class="col-md-4" style="margin-top:10px">
                <label>Validation Messages: </label>
                <ValidationSummary />
            </div>
        }
    </div>
</EditForm>
@if (displayUserAddedToDB)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">User added to database... </label>
    </div>
}
@*</div>*@
<hr />


<div class="form-group row">
    <button class="btn btn-info float-right" @onclick="GetSavedEmployees">List All Employees</button>
</div>
@if (employees != null)
{
    <table class="table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>E-mail</th>
                <th>Mobile number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="employee" Items="@employees">
                <tr>
                    <td>@employee.Fullname</td>
                    <td>@employee.Email</td>
                    <td>@employee.MobileNumber</td>
                    <td>
                        <input type="button" class="btn btn-danger" @onclick="@(e => DeleteEmployee(employee.Id))" value="Delete" />
                        <a href='/editemployee/@employee.Id' class="btn btn-block">Edit</a> 
                    </td>

                </tr>
            </Virtualize>
        </tbody>
    </table>
}

@code{
    Employee emp = new Employee();
    private List<Models.Employee> employees = null;

    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    private async Task getTohttp()
    {
      
    }
    private async Task GetSavedEmployees()
    { employees = await DBContext.GetAll(); }
    private async Task DeleteEmployee(int id)
    {
        await DBContext.Delete(id);
        await Task.Run(() => GetSavedEmployees());
        await Task.CompletedTask;
    }
    private async Task EditEmp(int id)
    {
        emp = await DBContext.GetById(id);
        emp.Fullname = "dfdffd";
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
        await DBContext.Add(new Models.Employee()
        {
            Email = emp.Email,
            Fullname = emp.Fullname,
            MobileNumber = emp.MobileNumber

        });
        emp.Fullname = "";
        emp.Email = "";
        emp.MobileNumber = "";
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }
    protected override async Task OnInitializedAsync()
    {
        employees = await DBContext.GetAll();
    }
    private string AddResult = string.Empty;

}