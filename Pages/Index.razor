@page "/"
@inject Models.EmployeeContext DBContext

@using FirstBlazorApp.Models


@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<input type="button" class="btn btn-primary" @onclick="synData" value="synData" />
<h1>Local Storage!</h1>

<input class="form-control" @bind="currentInputValue" />
<button class="btn btn-secondary" @onclick="Save">บันทึก</button>
<button class="btn btn-secondary" @onclick="Read">อ่าน</button>
<button class="btn btn-secondary" @onclick="Delete">ลบ</button>
@*test deploy   id test<h1>Hello, Bassam</h1>*@

<p>
    <a class="btn btn-secondary" href="addemp">Create New Employee</a>
</p>

@if (displayUserAddedToDB)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">User added to database... </label>
    </div>
}

<hr />


@*<div class="form-group row">
        <button class="btn btn-info float-right" @onclick="GetSavedEmployees">List All Employees</button>
    </div>*@
@if (employees != null)
{
    <table class="table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>E-mail</th>
                <th>Mobile number</th>
                <th>Server update</th>
                <th>Local update</th>
                <th>User</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="employee" Items="@employees">
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Fullname</td>
                    <td>@employee.Email</td>
                    <td>@employee.MobileNumber</td>
                    <td>@employee.ServerUpdate</td>
                    <td>@employee.localUpdate</td>
                    <td>@employee.User</td>
                    <td>
                        <input type="button" class="btn btn-danger" @onclick="@(e => DeleteEmployee(employee.Id))" value="Delete" />
                        <a href='editemployee/0  @employee.Id' class="btn btn-block">Edit</a>
                    </td>

                </tr>
            </Virtualize>
        </tbody>
    </table>
}
@code{
    Employee emp = new Employee();
    private List<Models.Employee> employees = null;

    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    string currentInputValue;

    public async Task synData()
    {
        await DBContext.loadDbFromServer();
    }
    public async Task Save()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "name", currentInputValue);
    }

    public async Task Read()
    {
        currentInputValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "name");
    }

    public async Task Delete()
    {
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "name");
    }
    // http

    Employee ReceivedEmployee;
    public string FormSubmitMessage { get; set; } = "Reservation Not Created";

    public async Task HandleValidSubmit()
    {
        ReceivedEmployee = new Employee();
        using (var httpClient = new HttpClient())
        {
            //StringContent content = new StringContent(JsonConvert.SerializeObject(employees), Encoding.UTF8, "application/json");



            using (var response = await httpClient.GetAsync("https://www.psutrobon.com/gis_bssm/blazorTest.php?id=9"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                //ReceivedEmployee = JsonConvert.DeserializeObject<Employee>(apiResponse);
            }
        }
        FormSubmitMessage = "Reservation Created";
    }

    private async Task GetSavedEmployees()
    { employees = await DBContext.GetAll(); }
    private async Task DeleteEmployee(int id)
    {
        await DBContext.Delete(id);
        await Task.Run(() => GetSavedEmployees());
        await Task.CompletedTask;
    }
    private async Task EditEmp(int id)
    {
        emp = await DBContext.GetById(id);
        emp.Fullname = "dfdffd";
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
        await DBContext.Add(new Models.Employee()
        {
            Email = emp.Email,
            Fullname = emp.Fullname,
            MobileNumber = emp.MobileNumber

        });
        emp.Fullname = "";
        emp.Email = "";
        emp.MobileNumber = "";
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }
    protected override async Task OnInitializedAsync()
    {
        employees = await DBContext.GetAll();
    }
    private string AddResult = string.Empty;

}